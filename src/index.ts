#!/usr/bin/env node
import { cleanupSingleProject } from './cleanupSingleProject.js';
import { CommanderError, program } from 'commander';
import { format as formatPath, parse as parsePath, resolve as resolvePath } from 'node:path';
import { EDITOR_BUNDLE_DEFAULT, EDITOR_BUNDLE_EXTRA_DEFAULT } from './constants.js';

async function defaultAction(projectPath: string, options: Record<string, string>): Promise<void> {
    try {
        projectPath = resolvePath(projectPath);

        let editorBundle: string;
        if ('editorBundle' in options) {
            editorBundle = resolvePath(options.editorBundle);
        } else {
            editorBundle = resolvePath(parsePath(projectPath).dir, EDITOR_BUNDLE_DEFAULT);
        }


        let editorBundleExtra: string | null = null;
        if ('editorBundleExtra' in options) editorBundleExtra = resolvePath(options.editorBundleExtra);

        let outputPath: string;
        if ('output' in options) {
            outputPath = resolvePath(options.output);
        } else {
            const tempPath = parsePath(projectPath);
            tempPath.base = `cleaned-${tempPath.base}`;
            outputPath = formatPath(tempPath);
        }

        if (options.replace) {
            if ('output' in options) {
                throw new CommanderError(1, 'output-replace-clash', '--output option cannot be used with --replace flag');
            }

            outputPath = projectPath;
        }

        console.log(`Cleaning up project: "${projectPath}"...`);
        await cleanupSingleProject(projectPath, outputPath, editorBundle, editorBundleExtra);
    } catch(err) {
        if (err instanceof CommanderError) {
            program.error(err.message, { exitCode: err.exitCode, code: err.code });
        } else {
            console.error(err);
            program.error('Unexpected error occurred', { exitCode: 63, code: 'unexpected' });
        }
    }
}

program
    .argument('<project-path>', 'File path to project file that needs to be cleaned')
    .option('-o, --output <path>', 'Where the cleaned project file will be stored. Does not override the input project by default')
    .option('-r, --replace', 'Replace the input project. Cannot be used with --output')
    .option('-b, --editor-bundle <path>', `The editor bundle that was generated by the Wonderland Editor for the input project when building (default: "<project-path directory>/${EDITOR_BUNDLE_DEFAULT}")`)
    .option('-e, --editor-bundle-extra <path>', `Add extra definitions to the editor bundle via a JS script (default: "${EDITOR_BUNDLE_EXTRA_DEFAULT}")`)
    .action(defaultAction)

program.parseAsync();